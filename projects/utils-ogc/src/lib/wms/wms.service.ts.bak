import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Jsonix } from '@michaellangbein/jsonix';
import { map } from 'rxjs/operators';
import * as XLink_1_0_Factory from 'w3c-schemas/lib/XLink_1_0';
const XLink_1_0 = XLink_1_0_Factory.XLink_1_0;
import * as OWS_1_1_0_Factory from 'ogc-schemas/lib/OWS_1_1_0';
const OWS_1_1_0 = OWS_1_1_0_Factory.OWS_1_1_0;
import * as WMS_1_0_0_Factory from 'ogc-schemas/lib/WMS_1_0_0';
const WMS_1_0_0 = WMS_1_0_0_Factory.WMS_1_0_0;
import * as WMS_1_1_0_Factory from 'ogc-schemas/lib/WMS_1_1_0';
const WMS_1_1_0 = WMS_1_1_0_Factory.WMS_1_1_0;
import * as WMS_1_1_1_Factory from 'ogc-schemas/lib/WMS_1_1_1';
const WMS_1_1_1 = WMS_1_1_1_Factory.WMS_1_1_1;
import * as WMS_1_3_0_Factory from 'ogc-schemas/lib/WMS_1_3_0';
const WMS_1_3_0 = WMS_1_3_0_Factory.WMS_1_3_0;
import * as WMS_1_3_0_Exceptions_Factory from 'ogc-schemas/lib/WMS_1_3_0_Exceptions';
const WMS_1_3_0_Exceptions = WMS_1_3_0_Exceptions_Factory.WMS_1_3_0_Exceptions;


export interface WmsCapabilities {
  value: any;
}

export type WmsVersion = '1.1.0' | '1.1.1' | '1.3.0';

@Injectable({
  providedIn: 'root'
})
export class WmsClient {
  private xmlmarshaller;
  private xmlunmarshaller;

  constructor(private http: HttpClient) {
    const context = new Jsonix.Context([XLink_1_0, WMS_1_0_0, WMS_1_1_0, WMS_1_1_1, WMS_1_3_0, WMS_1_3_0_Exceptions]);
    this.xmlunmarshaller = context.createUnmarshaller();
    this.xmlmarshaller = context.createMarshaller();
  }

  public getCapabilities(url: string, version: WmsVersion = '1.1.0'): Observable<WmsCapabilities> {
    const getCapabilitiesUrl = `${url}?SERVICE=WMS&REQUEST=GetCapabilities&VERSION=${version}`;
    const headers = new HttpHeaders({
      'Content-Type': 'text/xml',
      'Accept': 'text/xml, application/xml'
    });
    return this.http.get(getCapabilitiesUrl, { headers, responseType: 'text' }).pipe(
      map(response => {
        return this.xmlunmarshaller.unmarshalString(response);
      })
    );
  }

  public getLayerFromCapabilities(name: string, capabilities: WmsCapabilities) {
    /** http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd - The Layer Element */
    const rootLayer: null | any = capabilities.value.capability.layer;
    return this.getLayerFromCapabilitiesLayer(name, rootLayer);
  }
  
  /**
   * @param name
   * @param layer http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd - The Layer Element
   */
  private getLayerFromCapabilitiesLayer(name: string, layer: any) {
    const rootLayer: null | any = layer;
    if (rootLayer) {
      if (rootLayer.name && rootLayer.name === name) {
        return rootLayer;
      } else {
        if (rootLayer.layer && Array.isArray(rootLayer.layer)) {
          // find layer from array... recursive
          return rootLayer.layer.find(item => {
            return this.getLayerFromCapabilitiesLayer(name, item);
          });
        } else if (rootLayer.layer && rootLayer.layer.name && rootLayer.layer.name === name) {
          return rootLayer.layer;
        }
      }
    } else {
      return null;
    }
  }
  
  
  public getTimeDimensionFromLayer(layer: any, wmsVersion: WmsVersion) {
    switch (wmsVersion) {
      case '1.1.0':
        return this.getTimeDimension_1_1_1(layer);
      case '1.1.1':
        return this.getTimeDimension_1_1_1(layer);
      case '1.3.0':
        return this.getTimeDimension_1_3_0(layer);
    }
  }

    /**
   * (Dimension) http://schemas.opengis.net/wms/1.1.1/capabilities_1_1_1.xsd
   * and http://schemas.opengis.net/wms/1.1.0/capabilities_1_1_0.xml
   * 1.0.0 has no Dimensions - http://schemas.opengis.net/wms/1.0.0/capabilities_1_0_0.dtd
   */
     private getTimeDimension_1_1_1(layer) {
      let timeData;
      if (layer.dimension && layer.extent) {
        layer.dimension.forEach((dimension) => {
          if (dimension.name === 'time') {
            layer.extent.forEach((extent) => {
              if (extent.name === 'time') {
                timeData = extent.value;
              }
            });
          }
        });
      }
      return timeData;
    }
    
    /**
     * (Dimension) http://schemas.opengis.net/wms/1.3.0/capabilities_1_3_0.xsd
     */
    private getTimeDimension_1_3_0(layer) {
      let timeData;
      if (layer.dimension) {
        layer.dimension.forEach((dimension) => {
          if (dimension.name === 'time') {
            timeData = dimension.value;
          }
        });
      }
      return timeData;
    }
  
}
